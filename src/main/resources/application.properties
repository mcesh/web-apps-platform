#Data source config
spring.datasource.url=jdbc:mysql://localhost:3306/mock_photo
spring.datasource.username=Fixer@17-92-73
spring.datasource.password=F67Yionghre@erb
spring.jpa.hibernate.ddl-auto=update
tokenSecret = qFUch1xxu4jtKixVyLWGgxL0mPMGNHmRGl2oQUrI7FxtQYz5Dr5KGmGveVgyJve
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
server.servlet.context-path=/photo-sharing-app-ws/
#Mail
spring.mail.host=smtp.gmail.com
spring.mail.port=465
mail.smtp.auth=true
enable_starttls_auto: true
spring.mail.username=siya.nxuseka@gmail.com
spring.mail.password=jsfhbbyamasrkwmu
spring.mail.protocol=smtps

#Support Email
support.email=nustasm12@gmail.com
spring.security.user.name=user
spring.mail.default-encoding=UTF-8
spring.security.user.password=$2a$10$mwbg/0vCGW/wiKtjS1CcTOW7FeBzqFTpOy0O3466Gt7VeLjhajkZe
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
userResource.authorizationHeader.description = Bear JWT Token;
userResource.GetUserByUserId.ApiOperation.Notes = This Webservice Endpoint returns user details User provides UserId in the URL path \
  usage example. users/123.
userResource.Username.ApiOperation.Notes = This Webservice Endpoint returns user details, User provides username in the URL path \
  usage example. users/username/user-1, It will be consumed by front end to fetch user details after login\
  user provides their email address and password\
  email address must be verified first.
userResource.CreateUser.ApiOperation.Notes = This Webservice Endpoint allows users to register in our back end database and store \
   their details.
userResource.UpdateUsersDetails.ApiOperation.Notes = This Webservice allows a user to update their details usage users/123 \
  with body json body payload to update records

userResource.FirstName.ApiOperation.Notes = This Webservice returns all users with the given name, if there is no user we throw \
  an error for no users found usage firstName/{firstName}

userResource.DeleteUserById.ApiOperation.Notes = This Webservice deletes the user with specified id usage user/123

userResource.GetUsers.ApiOperation.Notes = This webservice returns all users in the database limit is 900

userResource.GetUserAddressesByUserId.ApiOperation.Notes = This Webservice returns all addresses for the specified userId
serResource.GetUserAddress.ApiOperation.Notes = This Webservice returns address for the specified userId and addressId
userResource.EmailVerification.ApiOperation.Notes = This Webservice verifies a token that has been sent to a user \
  during registration
userResource.PasswordResetRequest.ApiOperation.Notes = This Webservice allows users to request for password reset in\
   case they forgot their login password
userResource.PasswordReset.ApiOperation.Notes = This Webservice allows users to reset their password
userResource.GetUser.ApiOperation.Notes = This Webservice returns a specified number of verified \
  users it is sorted in a reverse order in order for a Support Engineer to quickly see latest registered clients
userAppRequestResource.RequestAppDevelopment.ApiOperation.Notes = This Endpoint is for users who want us to build \
  websites for them they will log a request via this API endpoint

userAppRequestResource.AppRequestEmailVerification.ApiOperation.Notes = This webservice allows users who request \
  application development to 

userResource.EmailAddress.ApiOperation.Notes = This Webservice Endpoint returns user details, User provides email \
  address in the URL path \
  usage example. users/email/test@gmail.com, It will be consumed by front end to fetch user details after login\
  user provides their email address and password\
  email address must be verified first.

userResource.DeleteEmailAddress.ApiOperation.Notes = An API to delete user by email address
